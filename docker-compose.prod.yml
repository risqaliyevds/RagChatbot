version: '3.8'

# =============================================================================
# Production Docker Compose Configuration
# =============================================================================
# This docker-compose file is optimized for production deployment.
# All configuration is controlled via .env file.
# No volumes are used - the application is fully self-contained.

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: chatbot_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-chatbot_db}
      POSTGRES_USER: ${POSTGRES_USER:-chatbot_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-chatbot_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-chatbot_user} -d ${POSTGRES_DB:-chatbot_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - chatbot-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant_prod
    ports:
      - "${QDRANT_PORT:-6333}:6333"
      - "${QDRANT_GRPC_PORT:-6334}:6334"
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=${QDRANT_LOG_LEVEL:-INFO}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/collections"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - chatbot-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Main FastAPI Application
  chatbot_app:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        CONTAINER_USER: ${CONTAINER_USER:-appuser}
        CONTAINER_UID: ${CONTAINER_UID:-1004}
    image: chatbot:prod
    container_name: chatbot_app_prod
    ports:
      - "${PORT:-8081}:${PORT:-8081}"
    env_file:
      - .env
    environment:
      # Application Configuration
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-false}
      - RELOAD=${RELOAD:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - HOST=${HOST:-0.0.0.0}
      - PORT=${PORT:-8081}
      # PostgreSQL Database Configuration
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-chatbot_db}
      - POSTGRES_USER=${POSTGRES_USER:-chatbot_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-chatbot_password}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-chatbot_user}:${POSTGRES_PASSWORD:-chatbot_password}@postgres:5432/${POSTGRES_DB:-chatbot_db}
      # vLLM Configuration (loaded from .env file)
      # Other configurations loaded from .env file
      # Only override Qdrant URL to ensure internal Docker network connectivity
      - QDRANT_URL=http://qdrant:6333
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT:-8081}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    networks:
      - chatbot-network
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # Gradio Interface
  gradio_app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        CONTAINER_USER: ${CONTAINER_USER:-appuser}
        CONTAINER_UID: ${CONTAINER_UID:-1004}
    image: chatbot:prod
    container_name: gradio_app_prod
    ports:
      - "${GRADIO_PORT:-7860}:${GRADIO_PORT:-7860}"
    command: ["python", "application_runner.py", "--mode", "both"]
    env_file:
      - .env
    environment:
      # Gradio Configuration
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-false}
      - GRADIO_SHARE=${GRADIO_SHARE:-false}
      - GRADIO_HOST=${GRADIO_HOST:-0.0.0.0}
      - GRADIO_PORT=${GRADIO_PORT:-7860}
      - API_BASE_URL=http://chatbot_app:${PORT:-8081}
    depends_on:
      chatbot_app:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${GRADIO_PORT:-7860}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    networks:
      - chatbot-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

# No volumes - application is fully self-contained
# Data persistence should be handled by external managed databases in production

networks:
  chatbot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 