#!/usr/bin/env python3
"""
Gradio Test Interface for Platform Assistant RAG Chatbot
========================================================

Simple Gradio interface to test the enhanced RAG chatbot with:
- User management
- Chat history tracking
- Platform functionality assistance
"""

import gradio as gr
import requests
import json
import uuid
import os
from datetime import datetime
from typing import List, Tuple, Optional

# Configuration
API_BASE_URL = os.getenv("API_BASE_URL", "http://localhost:8081")
DEFAULT_USER_ID = "test_user_001"

# Debug print
print(f"üîß DEBUG: API_BASE_URL = {API_BASE_URL}")
print(f"üîß DEBUG: Environment API_BASE_URL = {os.getenv('API_BASE_URL', 'NOT SET')}")

class GradioRAGClient:
    """Gradio RAG –∫–ª–∏–µ–Ω—Ç–∏"""
    
    def __init__(self, base_url: str = API_BASE_URL):
        self.base_url = base_url
        self.current_user_id = DEFAULT_USER_ID
        self.current_chat_id = None
        
    def check_health(self) -> dict:
        """–¢–∏–∑–∏–º —Å–æ“ì–ª–∏“ì–∏–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à"""
        try:
            response = requests.get(f"{self.base_url}/health", timeout=10)
            if response.status_code == 200:
                return {"status": "‚úÖ –°–æ“ì–ª–æ–º", "data": response.json()}
            else:
                return {"status": f"‚ùå –•–∞—Ç–æ {response.status_code}", "data": response.text}
        except Exception as e:
            return {"status": f"‚ùå –£–ª–∞–Ω–∏—à —Ö–∞—Ç–æ—Å–∏", "data": str(e)}
    
    def send_message(self, message: str, user_id: str = None, chat_id: str = None) -> dict:
        """–•–∞–±–∞—Ä —é–±–æ—Ä–∏—à"""
        try:
            payload = {
                "user_id": user_id or  self.current_user_id,
                "message": message
            }
            
            if chat_id:
                payload["chat_id"] = chat_id
                
            response = requests.post(
                f"{self.base_url}/v1/chat",
                json=payload,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.current_chat_id = data.get("chat_id")
                return {
                    "success": True,
                    "response": data.get("message", ""),
                    "chat_id": data.get("chat_id", ""),
                    "timestamp": data.get("timestamp", "")
                }
            else:
                return {
                    "success": False,
                    "error": f"HTTP {response.status_code}: {response.text}"
                }
                
        except Exception as e:
            return {
                "success": False,
                "error": f"–•–∞—Ç–æ: {str(e)}"
            }
    
    def get_chat_history(self, chat_id: str, user_id: str = None) -> dict:
        """–ß–∞—Ç —Ç–∞—Ä–∏—Ö–∏–Ω–∏ –æ–ª–∏—à"""
        try:
            payload = {
                "user_id": user_id or self.current_user_id,
                "chat_id": chat_id
            }
            
            response = requests.post(
                f"{self.base_url}/v1/chat/history",
                json=payload,
                headers={"Content-Type": "application/json"},
                timeout=10
            )
            
            if response.status_code == 200:
                return {"success": True, "data": response.json()}
            else:
                return {"success": False, "error": f"HTTP {response.status_code}: {response.text}"}
                
        except Exception as e:
            return {"success": False, "error": f"–•–∞—Ç–æ: {str(e)}"}
    
    def create_new_chat(self, user_id: str = None) -> dict:
        """–Ø–Ω–≥–∏ —á–∞—Ç —è—Ä–∞—Ç–∏—à (New Chat button functionality)"""
        try:
            payload = {
                "user_id": user_id or self.current_user_id
            }
            
            response = requests.post(
                f"{self.base_url}/v1/chat/new",
                json=payload,
                headers={"Content-Type": "application/json"},
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                self.current_chat_id = data.get("chat_id")
                return {
                    "success": True,
                    "chat_id": data.get("chat_id", ""),
                    "message": data.get("message", ""),
                    "created_at": data.get("created_at", ""),
                    "last_activity": data.get("last_activity", "")
                }
            else:
                return {
                    "success": False,
                    "error": f"HTTP {response.status_code}: {response.text}"
                }
                
        except Exception as e:
            return {
                "success": False,
                "error": f"–•–∞—Ç–æ: {str(e)}"
            }

    def get_user_session_status(self, user_id: str = None) -> dict:
        """–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ —Å–µ—Å—Å–∏—è “≥–æ–ª–∞—Ç–∏–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à"""
        try:
            payload = {
                "user_id": user_id or self.current_user_id
            }
            
            response = requests.post(
                f"{self.base_url}/v1/user/session-status",
                json=payload,
                headers={"Content-Type": "application/json"},
                timeout=10
            )
            
            if response.status_code == 200:
                return {"success": True, "data": response.json()}
            else:
                return {"success": False, "error": f"HTTP {response.status_code}: {response.text}"}
                
        except Exception as e:
            return {"success": False, "error": f"–•–∞—Ç–æ: {str(e)}"}

    def get_user_chats(self, user_id: str = None) -> dict:
        """–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ —á–∞—Ç–ª–∞—Ä–∏–Ω–∏ –æ–ª–∏—à"""
        try:
            uid = user_id or self.current_user_id
            response = requests.get(
                f"{self.base_url}/v1/user/{uid}/chats",
                timeout=10
            )
            
            if response.status_code == 200:
                return {"success": True, "data": response.json()}
            else:
                return {"success": False, "error": f"HTTP {response.status_code}: {response.text}"}
                
        except Exception as e:
            return {"success": False, "error": f"–•–∞—Ç–æ: {str(e)}"}

    def upload_document(self, file_path: str) -> dict:
        """“≤—É–∂–∂–∞—Ç —é–∫–ª–∞—à"""
        try:
            with open(file_path, 'rb') as f:
                files = {'file': (os.path.basename(file_path), f, 'application/octet-stream')}
                
                response = requests.post(
                    f"{self.base_url}/v1/documents/upload",
                    files=files,
                    timeout=60  # Longer timeout for file upload
                )
                
                if response.status_code == 200:
                    return {"success": True, "data": response.json()}
                else:
                    return {"success": False, "error": f"HTTP {response.status_code}: {response.text}"}
                    
        except Exception as e:
            return {"success": False, "error": f"–•–∞—Ç–æ: {str(e)}"}

    def list_documents(self) -> dict:
        """“≤—É–∂–∂–∞—Ç–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏–Ω–∏ –æ–ª–∏—à"""
        try:
            response = requests.get(
                f"{self.base_url}/v1/documents/list",
                timeout=10
            )
            
            if response.status_code == 200:
                return {"success": True, "data": response.json()}
            else:
                return {"success": False, "error": f"HTTP {response.status_code}: {response.text}"}
                
        except Exception as e:
            return {"success": False, "error": f"–•–∞—Ç–æ: {str(e)}"}

    def delete_document(self, filename: str) -> dict:
        """“≤—É–∂–∂–∞—Ç–Ω–∏ —û—á–∏—Ä–∏—à"""
        try:
            payload = {"filename": filename}
            
            response = requests.delete(
                f"{self.base_url}/v1/documents/delete",
                json=payload,
                headers={"Content-Type": "application/json"},
                timeout=10
            )
            
            if response.status_code == 200:
                return {"success": True, "data": response.json()}
            else:
                return {"success": False, "error": f"HTTP {response.status_code}: {response.text}"}
                
        except Exception as e:
            return {"success": False, "error": f"–•–∞—Ç–æ: {str(e)}"}



# Global client instance
client = GradioRAGClient()

def format_chat_history(messages: List[dict]) -> str:
    """–ß–∞—Ç —Ç–∞—Ä–∏—Ö–∏–Ω–∏ —Ñ–æ—Ä–º–∞—Ç–ª–∞—à"""
    if not messages:
        return "–ß–∞—Ç —Ç–∞—Ä–∏—Ö–∏ –±—û—à"
    
    formatted = []
    for msg in messages:
        role = "üë§ –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏" if msg.get("role") == "user" else "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
        content = msg.get("content", "")
        timestamp = msg.get("timestamp", "")
        if timestamp:
            try:
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                time_str = dt.strftime("%H:%M:%S")
            except:
                time_str = timestamp[:8] if len(timestamp) > 8 else timestamp
        else:
            time_str = ""
        
        formatted.append(f"**{role}** {time_str}\n{content}\n")
    
    return "\n".join(formatted)

def chat_interface(message: str, history: List[dict], user_id: str, chat_id: str) -> Tuple[List[dict], str, str]:
    """–ß–∞—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏"""
    if not message.strip():
        return history, "", chat_id
    
    # Update client user ID
    client.current_user_id = user_id or DEFAULT_USER_ID
    
    # Send message
    result = client.send_message(message, user_id, chat_id)
    
    if result.get("success"):
        response = result.get("response", "–ñ–∞–≤–æ–± –æ–ª–∏–Ω–º–∞–¥–∏")
        new_chat_id = result.get("chat_id", chat_id)
        
        # Add to history in messages format
        history.append({"role": "user", "content": message})
        history.append({"role": "assistant", "content": response})
        
        return history, "", new_chat_id
    else:
        error_msg = f"‚ùå –•–∞—Ç–æ: {result.get('error', '–ù–æ–º–∞—ä–ª—É–º —Ö–∞—Ç–æ')}"
        history.append({"role": "user", "content": message})
        history.append({"role": "assistant", "content": error_msg})
        return history, "", chat_id

def check_system_health() -> str:
    """–¢–∏–∑–∏–º —Å–æ“ì–ª–∏“ì–∏–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à"""
    health = client.check_health()
    status = health.get("status", "–ù–æ–º–∞—ä–ª—É–º")
    data = health.get("data", {})
    
    if isinstance(data, dict):
        details = f"""
**“≤–æ–ª–∞—Ç:** {status}
**–•–∞–±–∞—Ä:** {data.get('message', '–ú–∞—ä–ª—É–º–æ—Ç –π—û“õ')}
**Qdrant:** {data.get('qdrant_status', '–ú–∞—ä–ª—É–º–æ—Ç –π—û“õ')}
"""
    else:
        details = f"**“≤–æ–ª–∞—Ç:** {status}\n**–ú–∞—ä–ª—É–º–æ—Ç:** {data}"
    
    return details

def load_chat_history(chat_id: str, user_id: str) -> str:
    """–ß–∞—Ç —Ç–∞—Ä–∏—Ö–∏–Ω–∏ —é–∫–ª–∞—à"""
    if not chat_id.strip():
        return "–ß–∞—Ç ID –∫–∏—Ä–∏—Ç–∏–Ω–≥"
    
    result = client.get_chat_history(chat_id, user_id)
    
    if result.get("success"):
        data = result.get("data", {})
        messages = data.get("messages", [])
        total = data.get("total_messages", 0)
        
        if messages:
            formatted = format_chat_history(messages)
            return f"**–ñ–∞–º–∏ —Ö–∞–±–∞—Ä–ª–∞—Ä:** {total}\n\n{formatted}"
        else:
            return "–ë—É —á–∞—Ç–¥–∞ —Ö–∞–±–∞—Ä–ª–∞—Ä –π—û“õ"
    else:
        return f"‚ùå –•–∞—Ç–æ: {result.get('error', '–ù–æ–º–∞—ä–ª—É–º —Ö–∞—Ç–æ')}"

def load_user_chats(user_id: str) -> str:
    """–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ —á–∞—Ç–ª–∞—Ä–∏–Ω–∏ —é–∫–ª–∞—à"""
    result = client.get_user_chats(user_id)
    
    if result.get("success"):
        data = result.get("data", {})
        chats = data.get("chats", [])
        total = data.get("total_chats", 0)
        
        if chats:
            formatted = []
            for chat in chats:
                chat_id = chat.get("chat_id", "")
                created = chat.get("created_at", "")
                last_activity = chat.get("last_activity", "")
                msg_count = chat.get("message_count", 0)
                
                try:
                    created_dt = datetime.fromisoformat(created.replace('Z', '+00:00'))
                    created_str = created_dt.strftime("%Y-%m-%d %H:%M")
                except:
                    created_str = created
                
                try:
                    activity_dt = datetime.fromisoformat(last_activity.replace('Z', '+00:00'))
                    activity_str = activity_dt.strftime("%Y-%m-%d %H:%M")
                except:
                    activity_str = last_activity
                
                formatted.append(f"""
**–ß–∞—Ç ID:** `{chat_id}`
**–Ø—Ä–∞—Ç–∏–ª–≥–∞–Ω:** {created_str}
**–°—û–Ω–≥–≥–∏ —Ñ–∞–æ–ª–∏—è—Ç:** {activity_str}
**–•–∞–±–∞—Ä–ª–∞—Ä —Å–æ–Ω–∏:** {msg_count}
---""")
            
            return f"**–ñ–∞–º–∏ —á–∞—Ç–ª–∞—Ä:** {total}\n\n" + "\n".join(formatted)
        else:
            return "–ß–∞—Ç–ª–∞—Ä —Ç–æ–ø–∏–ª–º–∞–¥–∏"
    else:
        return f"‚ùå –•–∞—Ç–æ: {result.get('error', '–ù–æ–º–∞—ä–ª—É–º —Ö–∞—Ç–æ')}"

def new_chat(user_id: str) -> Tuple[List[dict], str, str]:
    """–Ø–Ω–≥–∏ —á–∞—Ç –±–æ—à–ª–∞—à (improved with API call)"""
    # Update client user ID
    client.current_user_id = user_id or DEFAULT_USER_ID
    
    # Create new chat via API
    result = client.create_new_chat(user_id)
    
    if result.get("success"):
        new_chat_id = result.get("chat_id", "")
        welcome_message = result.get("message", "–Ø–Ω–≥–∏ —á–∞—Ç —è—Ä–∞—Ç–∏–ª–¥–∏!")
        
        # Initialize with welcome message
        initial_history = [
            {"role": "assistant", "content": welcome_message}
        ]
        
        return initial_history, new_chat_id, f"‚úÖ –Ø–Ω–≥–∏ —á–∞—Ç —è—Ä–∞—Ç–∏–ª–¥–∏: {new_chat_id}"
    else:
        error_msg = f"‚ùå –Ø–Ω–≥–∏ —á–∞—Ç —è—Ä–∞—Ç–∏—à–¥–∞ —Ö–∞—Ç–æ: {result.get('error', '–ù–æ–º–∞—ä–ª—É–º —Ö–∞—Ç–æ')}"
        return [], "", error_msg

def check_user_session_status(user_id: str) -> str:
    """–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ —Å–µ—Å—Å–∏—è “≥–æ–ª–∞—Ç–∏–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à"""
    result = client.get_user_session_status(user_id)
    
    if result.get("success"):
        data = result.get("data", {})
        has_active = data.get("has_active_session", False)
        active_chat_id = data.get("active_chat_id", "")
        last_activity = data.get("last_activity", "")
        session_expired = data.get("session_expired", False)
        
        if has_active:
            return f"""
**‚úÖ –§–∞–æ–ª —Å–µ—Å—Å–∏—è –º–∞–≤–∂—É–¥**
**–ß–∞—Ç ID:** `{active_chat_id}`
**–°—û–Ω–≥–≥–∏ —Ñ–∞–æ–ª–∏—è—Ç:** {last_activity}
"""
        elif session_expired:
            return f"""
**‚è∞ –°–µ—Å—Å–∏—è –º—É–¥–¥–∞—Ç–∏ —Ç—É–≥–∞–≥–∞–Ω**
**–°—û–Ω–≥–≥–∏ —Ñ–∞–æ–ª–∏—è—Ç:** {last_activity}
**“≤–æ–ª–∞—Ç:** –Ø–Ω–≥–∏ —á–∞—Ç —è—Ä–∞—Ç–∏—à –∫–µ—Ä–∞–∫ (1 —Å–æ–∞—Ç–¥–∞–Ω –∫—û–ø –≤–∞“õ—Ç —û—Ç–≥–∞–Ω)
"""
        else:
            return "**üÜï –Ø–Ω–≥–∏ —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏** - “≥–∞–ª–∏ —á–∞—Ç —è—Ä–∞—Ç–∏–ª–º–∞–≥–∞–Ω"
    else:
        return f"‚ùå –•–∞—Ç–æ: {result.get('error', '–ù–æ–º–∞—ä–ª—É–º —Ö–∞—Ç–æ')}"


def upload_document_handler(file, progress=gr.Progress()) -> str:
    """“≤—É–∂–∂–∞—Ç —é–∫–ª–∞—à –∏—à–ª–æ–≤—á–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∏–ª–∞–Ω"""
    if file is None:
        return "‚ùå –§–∞–π–ª —Ç–∞–Ω–ª–∞–Ω–º–∞–≥–∞–Ω"
    
    try:
        # Initialize progress tracking
        progress(0, desc="–§–∞–π–ª–Ω–∏ —Ç–∞–π—ë—Ä–ª–∞—à...")
        
        # Get file size for better progress tracking
        import os
        file_size = os.path.getsize(file.name) if os.path.exists(file.name) else 0
        
        # Convert file size to readable format
        if file_size < 1024:
            size_str = f"{file_size} –±–∞–π—Ç"
        elif file_size < 1024 * 1024:
            size_str = f"{file_size / 1024:.1f} –ö–ë"
        else:
            size_str = f"{file_size / (1024 * 1024):.1f} –ú–ë"
        
        # Stage 1: File validation
        progress(0.05, desc="–§–∞–π–ª–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à...")
        import time
        time.sleep(0.2)  # Small delay for visual feedback
        
        # Stage 2: File reading
        progress(0.15, desc=f"–§–∞–π–ª–Ω–∏ —û“õ–∏—à ({size_str})...")
        time.sleep(0.3)
        
        # Stage 3: Starting upload
        progress(0.25, desc="–°–µ—Ä–≤–µ—Ä–≥–∞ —é–∫–ª–∞—à...")
        
        # Simulate realistic upload progress based on file size
        upload_stages = [
            (0.3, "–§–∞–π–ª–Ω–∏ —Å–µ—Ä–≤–µ—Ä–≥–∞ —é–∫–ª–∞—à..."),
            (0.35, "–°–µ—Ä–≤–µ—Ä–¥–∞ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–º–æ“õ–¥–∞..."),
            (0.4, "–§–∞–π–ª —Ç–µ–∫—à–∏—Ä–∏–ª–º–æ“õ–¥–∞..."),
        ]
        
        for stage_progress, stage_desc in upload_stages:
            progress(stage_progress, desc=stage_desc)
            # Adjust timing based on file size
            if file_size > 5 * 1024 * 1024:  # Files larger than 5MB
                time.sleep(0.5)
            else:
                time.sleep(0.2)
        
        # Upload with progress simulation
        result = client.upload_document(file.name)
        
        # Stage 4: Processing on server (varies by file type)
        file_ext = os.path.splitext(file.name)[1].lower()
        if file_ext == '.pdf':
            progress(0.5, desc="PDF —Ñ–∞–π–ª–∏–Ω–∏ —Ç–∞—Ö–ª–∏–ª “õ–∏–ª–∏—à...")
            time.sleep(0.8)
        elif file_ext in ['.docx', '.doc']:
            progress(0.5, desc="Word “≥—É–∂–∂–∞—Ç–∏–Ω–∏ –∏—à–ª–∞—à...")
            time.sleep(0.6)
        else:
            progress(0.5, desc="–ú–∞—Ç–Ω —Ñ–∞–π–ª–∏–Ω–∏ –∏—à–ª–∞—à...")
            time.sleep(0.4)
        
        # Stage 5: Document processing stages
        processing_stages = [
            (0.6, "–ú–∞—Ç–Ω–Ω–∏ —á–∏“õ–∞—Ä–∏—à..."),
            (0.7, "“≤—É–∂–∂–∞—Ç–Ω–∏ –±—û–ª–∞–∫–ª–∞—à..."),
            (0.8, "–ú–µ—Ç–∞–¥–∞–Ω–ª–∞—Ä–Ω–∏ —Ç–∞–π—ë—Ä–ª–∞—à..."),
        ]
        
        for stage_progress, stage_desc in processing_stages:
            progress(stage_progress, desc=stage_desc)
            time.sleep(0.3)
        
        # Stage 6: Creating embeddings (most time-consuming)
        embedding_stages = [
            (0.85, "–í–µ–∫—Ç–æ—Ä–ª–∞—Ä —è—Ä–∞—Ç–∏—à..."),
            (0.9, "–í–µ–∫—Ç–æ—Ä–ª–∞—Ä–Ω–∏ —Å–∞“õ–ª–∞—à..."),
            (0.95, "–ò–Ω–¥–µ–∫—Å–ª–∞—à..."),
        ]
        
        for stage_progress, stage_desc in embedding_stages:
            progress(stage_progress, desc=stage_desc)
            # Longer delay for embedding creation (realistic timing)
            if file_size > 1024 * 1024:  # Files larger than 1MB
                time.sleep(0.5)
            else:
                time.sleep(0.3)
        
        if result.get("success"):
            progress(1.0, desc="‚úÖ –ú—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ —Ç—É–≥–∞—Ç–∏–ª–¥–∏!")
            
            data = result.get("data", {})
            filename = data.get("filename", "")
            file_size = data.get("file_size", 0)
            chunks_added = data.get("chunks_added", 0)
            processing_time = data.get("processing_time", 0)
            message = data.get("message", "")
            
            # Convert file size to readable format
            if file_size < 1024:
                size_str = f"{file_size} –±–∞–π—Ç"
            elif file_size < 1024 * 1024:
                size_str = f"{file_size / 1024:.1f} –ö–ë"
            else:
                size_str = f"{file_size / (1024 * 1024):.1f} –ú–ë"
            
            return f"""
**‚úÖ “≤—É–∂–∂–∞—Ç –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ —é–∫–ª–∞–Ω–¥–∏!**

**–§–∞–π–ª –Ω–æ–º–∏:** {filename}
**–§–∞–π–ª “≥–∞–∂–º–∏:** {size_str}
**“ö—û—à–∏–ª–≥–∞–Ω —á–∞–Ω–∫–ª–∞—Ä:** {chunks_added}
**–ò—à–ª–æ–≤ –±–µ—Ä–∏—à –≤–∞“õ—Ç–∏:** {processing_time} —Å–æ–Ω–∏—è

**–•–∞–±–∞—Ä:** {message}

üéâ **–≠–Ω–¥–∏ —Å–∏–∑ —é–∫–ª–∞–Ω–≥–∞–Ω “≥—É–∂–∂–∞—Ç –±—û–π–∏—á–∞ —Å–∞–≤–æ–ª–ª–∞—Ä –±–µ—Ä–∞ –æ–ª–∞—Å–∏–∑!**
"""
        else:
            progress(1.0, desc="‚ùå –•–∞—Ç–æ —é–∑ –±–µ—Ä–¥–∏")
            error_msg = result.get("error", "–ù–æ–º–∞—ä–ª—É–º —Ö–∞—Ç–æ")
            return f"‚ùå “≤—É–∂–∂–∞—Ç —é–∫–ª–∞—à–¥–∞ —Ö–∞—Ç–æ: {error_msg}"
            
    except Exception as e:
        progress(1.0, desc="‚ùå –•–∞—Ç–æ —é–∑ –±–µ—Ä–¥–∏")
        return f"‚ùå –•–∞—Ç–æ: {str(e)}"


def list_documents_handler() -> str:
    """“≤—É–∂–∂–∞—Ç–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏–Ω–∏ –∫—û—Ä—Å–∞—Ç–∏—à –∏—à–ª–æ–≤—á–∏—Å–∏"""
    try:
        result = client.list_documents()
        
        if result.get("success"):
            data = result.get("data", {})
            files = data.get("files", [])
            total_files = data.get("total_files", 0)
            total_size = data.get("total_size", 0)
            
            if not files:
                return "üìÇ “≤—É–∂–∂–∞—Ç–ª–∞—Ä –ø–∞–ø–∫–∞—Å–∏ –±—û—à"
            
            # Convert total size to readable format
            if total_size < 1024:
                total_size_str = f"{total_size} –±–∞–π—Ç"
            elif total_size < 1024 * 1024:
                total_size_str = f"{total_size / 1024:.1f} –ö–ë"
            else:
                total_size_str = f"{total_size / (1024 * 1024):.1f} –ú–ë"
            
            output = f"""
## üìÇ “≤—É–∂–∂–∞—Ç–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏

**–ñ–∞–º–∏ —Ñ–∞–π–ª–ª–∞—Ä:** {total_files}
**–ñ–∞–º–∏ “≥–∞–∂–º:** {total_size_str}

---

"""
            
            for i, file_info in enumerate(files, 1):
                filename = file_info.get("filename", "")
                file_size = file_info.get("file_size", 0)
                created_at = file_info.get("created_at", "")
                modified_at = file_info.get("modified_at", "")
                file_extension = file_info.get("file_extension", "")
                
                # Convert file size to readable format
                if file_size < 1024:
                    size_str = f"{file_size} –±–∞–π—Ç"
                elif file_size < 1024 * 1024:
                    size_str = f"{file_size / 1024:.1f} –ö–ë"
                else:
                    size_str = f"{file_size / (1024 * 1024):.1f} –ú–ë"
                
                # Format dates
                try:
                    created_date = datetime.fromisoformat(created_at.replace('Z', '+00:00')).strftime("%Y-%m-%d %H:%M")
                    modified_date = datetime.fromisoformat(modified_at.replace('Z', '+00:00')).strftime("%Y-%m-%d %H:%M")
                except:
                    created_date = created_at[:16] if len(created_at) >= 16 else created_at
                    modified_date = modified_at[:16] if len(modified_at) >= 16 else modified_at
                
                # Get file type emoji
                emoji = "üìÑ"
                if file_extension == ".pdf":
                    emoji = "üìï"
                elif file_extension in [".docx", ".doc"]:
                    emoji = "üìò"
                elif file_extension == ".txt":
                    emoji = "üìù"
                elif file_extension == ".md":
                    emoji = "üìã"
                elif file_extension == ".py":
                    emoji = "üêç"
                
                output += f"""
### {emoji} {i}. {filename}

**“≤–∞–∂–º:** {size_str} | **–¢—É—Ä:** {file_extension.upper()} | **–Ø—Ä–∞—Ç–∏–ª–¥–∏:** {created_date} | **–é–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–¥–∏:** {modified_date}

---
"""
            
            return output
            
        else:
            error_msg = result.get("error", "–ù–æ–º–∞—ä–ª—É–º —Ö–∞—Ç–æ")
            return f"‚ùå “≤—É–∂–∂–∞—Ç–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏–Ω–∏ –æ–ª–∏—à–¥–∞ —Ö–∞—Ç–æ: {error_msg}"
            
    except Exception as e:
        return f"‚ùå –•–∞—Ç–æ: {str(e)}"


def delete_document_handler(filename: str) -> str:
    """“≤—É–∂–∂–∞—Ç–Ω–∏ —û—á–∏—Ä–∏—à –∏—à–ª–æ–≤—á–∏—Å–∏"""
    if not filename or filename.strip() == "":
        return "‚ùå –§–∞–π–ª –Ω–æ–º–∏ –∫–∏—Ä–∏—Ç–∏–ª–º–∞–≥–∞–Ω"
    
    try:
        result = client.delete_document(filename.strip())
        
        if result.get("success"):
            data = result.get("data", {})
            message = data.get("message", "")
            deleted_filename = data.get("filename", filename)
            embeddings_deleted = data.get("embeddings_deleted", 0)
            
            output = f"""
**‚úÖ “≤—É–∂–∂–∞—Ç –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ —û—á–∏—Ä–∏–ª–¥–∏!**

**–§–∞–π–ª –Ω–æ–º–∏:** {deleted_filename}

**–é—á–∏—Ä–∏–ª–≥–∞–Ω –≤–µ–∫—Ç–æ—Ä–ª–∞—Ä:** {embeddings_deleted}

**–•–∞–±–∞—Ä:** {message}
"""
            
            if embeddings_deleted > 0:
                output += "\n\n**üßπ –í–µ–∫—Ç–æ—Ä–ª–∞—Ä –±–∞–∑–∞—Å–∏ —Ç–æ–∑–∞–ª–∞–Ω–¥–∏:** –§–∞–π–ª–≥–∞ —Ç–∞–∞–ª–ª—É“õ–ª–∏ –±–∞—Ä—á–∞ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä —Ç–∏–∑–∏–º–¥–∞–Ω –æ–ª–∏–Ω–¥–∏."
            else:
                output += "\n\n**‚ö†Ô∏è –í–µ–∫—Ç–æ—Ä–ª–∞—Ä —Ç–æ–ø–∏–ª–º–∞–¥–∏:** –£—à–±—É —Ñ–∞–π–ª —É—á—É–Ω –≤–µ–∫—Ç–æ—Ä–ª–∞—Ä —Ç–æ–ø–∏–ª–º–∞–¥–∏ (–∏–ª–≥–∞—Ä–∏ –∏—à–ª–∞–Ω–º–∞–≥–∞–Ω —Ñ–∞–π–ª –±—û–ª–∏—à–∏ –º—É–º–∫–∏–Ω)."
            
            return output
            
        else:
            error_msg = result.get("error", "–ù–æ–º–∞—ä–ª—É–º —Ö–∞—Ç–æ")
            return f"‚ùå “≤—É–∂–∂–∞—Ç–Ω–∏ —û—á–∏—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ: {error_msg}"
            
    except Exception as e:
        return f"‚ùå –•–∞—Ç–æ: {str(e)}"




# Create Gradio interface
with gr.Blocks(title="Platform Assistant RAG Chatbot", theme=gr.themes.Soft()) as demo:
    gr.Markdown("""
    # ü§ñ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∏ RAG –ß–∞—Ç–±–æ—Ç
    
    –ë—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–ª–∏–≥–∏–Ω–∏ —û—Ä–≥–∞–Ω–∏—à —É—á—É–Ω —ë—Ä–¥–∞–º—á–∏ —á–∞—Ç–±–æ—Ç. 
    –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ ID –≤–∞ —á–∞—Ç —Ç–∞—Ä–∏—Ö–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∫ –±–æ—à“õ–∞—Ä–∏–ª–∞–¥–∏.
    """)
    
    with gr.Tab("üí¨ –ß–∞—Ç"):
        with gr.Row():
            with gr.Column(scale=2):
                user_id_input = gr.Textbox(
                    label="–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ ID",
                    value=DEFAULT_USER_ID,
                    placeholder="–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∏"
                )
                chat_id_input = gr.Textbox(
                    label="–ß–∞—Ç ID (–∏—Ö—Ç–∏—ë—Ä–∏–π)",
                    placeholder="–ú–∞–≤–∂—É–¥ —á–∞—Ç–Ω–∏ –¥–∞–≤–æ–º —ç—Ç—Ç–∏—Ä–∏—à —É—á—É–Ω ID –∫–∏—Ä–∏—Ç–∏–Ω–≥"
                )
                
            with gr.Column(scale=1):
                health_btn = gr.Button("üè• –¢–∏–∑–∏–º —Å–æ“ì–ª–∏“ì–∏", variant="secondary")
                new_chat_btn = gr.Button("üÜï –Ø–Ω–≥–∏ —á–∞—Ç", variant="primary")
                session_status_btn = gr.Button("üìä –°–µ—Å—Å–∏—è “≥–æ–ª–∞—Ç–∏", variant="secondary")
        
        chatbot = gr.Chatbot(
            label="–ß–∞—Ç",
            height=400,
            placeholder="–°–∞–≤–æ–ª–∏–Ω–≥–∏–∑–Ω–∏ —ë–∑–∏–Ω–≥...",
            type='messages'
        )
        
        with gr.Row():
            msg_input = gr.Textbox(
                label="–•–∞–±–∞—Ä",
                placeholder="–°–∞–≤–æ–ª–∏–Ω–≥–∏–∑–Ω–∏ —ë–∑–∏–Ω–≥...",
                scale=4
            )
            send_btn = gr.Button("üì§ –Æ–±–æ—Ä–∏—à", variant="primary", scale=1)
        
        with gr.Row():
            health_output = gr.Markdown(label="–¢–∏–∑–∏–º “≥–æ–ª–∞—Ç–∏")
            session_output = gr.Markdown(label="–°–µ—Å—Å–∏—è “≥–æ–ª–∞—Ç–∏")
    
    with gr.Tab("üìú –ß–∞—Ç —Ç–∞—Ä–∏—Ö–∏"):
        with gr.Row():
            history_user_id = gr.Textbox(
                label="–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ ID",
                value=DEFAULT_USER_ID
            )
            history_chat_id = gr.Textbox(
                label="–ß–∞—Ç ID",
                placeholder="–¢–∞—Ä–∏—Ö–∏–Ω–∏ –∫—û—Ä–∏—à —É—á—É–Ω —á–∞—Ç ID –∫–∏—Ä–∏—Ç–∏–Ω–≥"
            )
            load_history_btn = gr.Button("üì• –¢–∞—Ä–∏—Ö–Ω–∏ —é–∫–ª–∞—à", variant="primary")
        
        history_output = gr.Markdown(label="–ß–∞—Ç —Ç–∞—Ä–∏—Ö–∏")
    
    with gr.Tab("üìã –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ —á–∞—Ç–ª–∞—Ä–∏"):
        with gr.Row():
            chats_user_id = gr.Textbox(
                label="–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ ID",
                value=DEFAULT_USER_ID
            )
            load_chats_btn = gr.Button("üì• –ß–∞—Ç–ª–∞—Ä–Ω–∏ —é–∫–ª–∞—à", variant="primary")
        
        chats_output = gr.Markdown(label="–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ —á–∞—Ç–ª–∞—Ä–∏")
    
    with gr.Tab("üìÑ –§–∞–π–ª –±–æ—à“õ–∞—Ä—É–≤–∏"):
        gr.Markdown("""
        ### üìÑ –§–∞–π–ª –±–æ—à“õ–∞—Ä—É–≤–∏ –≤–∞ –≤–µ–∫—Ç–æ—Ä–ª–∞—à—Ç–∏—Ä–∏—à
        
        –ë—É –±—û–ª–∏–º–¥–∞ —Å–∏–∑ “≥—É–∂–∂–∞—Ç–ª–∞—Ä–Ω–∏ —é–∫–ª–∞—à, —Ä—û–π—Ö–∞—Ç–∏–Ω–∏ –∫—û—Ä–∏—à –≤–∞ —û—á–∏—Ä–∏—à –∞–º–∞–ª–ª–∞—Ä–∏–Ω–∏ –±–∞–∂–∞—Ä–∞ –æ–ª–∞—Å–∏–∑.
        """)
        
        with gr.Tab("üì§ –§–∞–π–ª —é–∫–ª–∞—à"):
            gr.Markdown("""
            **“ö—û–ª–ª–∞–±-“õ—É–≤–≤–∞—Ç–ª–∞–Ω–∞–¥–∏–≥–∞–Ω —Ñ–æ—Ä–º–∞—Ç–ª–∞—Ä:**
            - PDF —Ñ–∞–π–ª–ª–∞—Ä–∏ (.pdf)
            - Word “≥—É–∂–∂–∞—Ç–ª–∞—Ä–∏ (.docx, .doc)
            - –ú–∞—Ç–Ω —Ñ–∞–π–ª–ª–∞—Ä–∏ (.txt)
            - Markdown —Ñ–∞–π–ª–ª–∞—Ä–∏ (.md)
            - Python —Ñ–∞–π–ª–ª–∞—Ä–∏ (.py)
            
            **–ú–∞–∫—Å–∏–º–∞–ª —Ñ–∞–π–ª “≥–∞–∂–º–∏:** 50 –ú–ë
            """)
            
            with gr.Row():
                with gr.Column(scale=2):
                    file_upload = gr.File(
                        label="“≤—É–∂–∂–∞—Ç —Ç–∞–Ω–ª–∞–Ω–≥",
                        file_types=[".pdf", ".docx", ".doc", ".txt", ".md", ".py"],
                        type="filepath"
                    )
                    upload_btn = gr.Button("üì§ “≤—É–∂–∂–∞—Ç–Ω–∏ —é–∫–ª–∞—à", variant="primary", size="lg")
                
                with gr.Column(scale=1):
                    gr.Markdown("""
                    **–≠—Å–ª–∞—Ç–º–∞:**
                    - “≤—É–∂–∂–∞—Ç —é–∫–ª–∞–Ω–≥–∞–Ω–∏–¥–∞–Ω —Å—û–Ω–≥ —É –∞–≤—Ç–æ–º–∞—Ç–∏–∫ —Ä–∞–≤–∏—à–¥–∞ –∏—à–ª–∞–Ω–∞–¥–∏
                    - –í–µ–∫—Ç–æ—Ä–ª–∞—à—Ç–∏—Ä–∏—à –∂–∞—Ä–∞—ë–Ω–∏ –±–∏—Ä –Ω–µ—á–∞ –¥–∞“õ–∏“õ–∞ –¥–∞–≤–æ–º —ç—Ç–∏—à–∏ –º—É–º–∫–∏–Ω
                    - –Æ–∫–ª–∞–Ω–≥–∞–Ω “≥—É–∂–∂–∞—Ç–ª–∞—Ä `documents/` –ø–∞–ø–∫–∞—Å–∏–¥–∞ —Å–∞“õ–ª–∞–Ω–∞–¥–∏
                    """)
            
            upload_output = gr.Markdown(label="–Æ–∫–ª–∞—à –Ω–∞—Ç–∏–∂–∞—Å–∏")
        
        with gr.Tab("üìÇ –§–∞–π–ª–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏"):
            gr.Markdown("""
            ### üìÇ –ú–∞–≤–∂—É–¥ “≥—É–∂–∂–∞—Ç–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏
            
            –ë—É –µ—Ä–¥–∞ —Å–∏–∑ –±–∞—Ä—á–∞ —é–∫–ª–∞–Ω–≥–∞–Ω “≥—É–∂–∂–∞—Ç–ª–∞—Ä–Ω–∏ –∫—û—Ä–∞ –æ–ª–∞—Å–∏–∑.
            """)
            
            with gr.Row():
                list_files_btn = gr.Button("üîÑ –†—û–π—Ö–∞—Ç–Ω–∏ —è–Ω–≥–∏–ª–∞—à", variant="primary")
                
            files_list_output = gr.Markdown(label="–§–∞–π–ª–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏")
        
        with gr.Tab("üóëÔ∏è –§–∞–π–ª —û—á–∏—Ä–∏—à"):
            gr.Markdown("""
            ### üóëÔ∏è “≤—É–∂–∂–∞—Ç–Ω–∏ —û—á–∏—Ä–∏—à
            
            “≤—É–∂–∂–∞—Ç–Ω–∏ —Ç–∏–∑–∏–º–¥–∞–Ω –±—É—Ç—É–Ω–ª–∞–π —û—á–∏—Ä–∏—à—É—á—É–Ω —Ñ–∞–π–ª –Ω–æ–º–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥.
            
            **–û–≥–æ“≥–ª–∞–Ω—Ç–∏—Ä–∏—à:** –ë—É –∞–º–∞–ª “õ–∞–π—Ç–∞—Ä–∏–ª–º–∞—Å!
            """)
            
            with gr.Row():
                with gr.Column(scale=2):
                    filename_input = gr.Textbox(
                        label="–§–∞–π–ª –Ω–æ–º–∏",
                        placeholder="–ú–∞—Å–∞–ª–∞–Ω: my_document.pdf",
                        info="–é—á–∏—Ä–∏—à —É—á—É–Ω –∞–Ω“õ–æ —Ñ–∞–π–ª –Ω–æ–º–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥"
                    )
                    delete_btn = gr.Button("üóëÔ∏è –§–∞–π–ª–Ω–∏ —û—á–∏—Ä–∏—à", variant="stop")
                
                with gr.Column(scale=1):
                    gr.Markdown("""
                    **–≠—Å–ª–∞—Ç–º–∞:**
                    - –§–∞–π–ª –Ω–æ–º–∏–Ω–∏ –∞–Ω–∏“õ –∫–∏—Ä–∏—Ç–∏–Ω–≥
                    - –§–∞–π–ª —Ç–∏–∑–∏–º–¥–∞–Ω –±—É—Ç—É–Ω–ª–∞–π —û—á–∏—Ä–∏–ª–∞–¥–∏
                    - –£—à–±—É –∞–º–∞–ª “õ–∞–π—Ç–∞—Ä–∏–ª–º–∞—Å
                    - –§–∞–π–ª –≤–µ–∫—Ç–æ—Ä–ª–∞—Ä –±–∞–∑–∞—Å–∏–¥–∞–Ω “≥–∞–º –æ–ª–∏–Ω–∞–¥–∏
                    """)
            
            delete_output = gr.Markdown(label="–é—á–∏—Ä–∏—à –Ω–∞—Ç–∏–∂–∞—Å–∏")
        

    
    # Event handlers
    def send_message_handler(message, history, user_id, chat_id):
        return chat_interface(message, history, user_id, chat_id)
    
    # Bind events
    send_btn.click(
        send_message_handler,
        inputs=[msg_input, chatbot, user_id_input, chat_id_input],
        outputs=[chatbot, msg_input, chat_id_input]
    )
    
    msg_input.submit(
        send_message_handler,
        inputs=[msg_input, chatbot, user_id_input, chat_id_input],
        outputs=[chatbot, msg_input, chat_id_input]
    )
    
    health_btn.click(
        check_system_health,
        outputs=health_output
    )
    
    new_chat_btn.click(
        new_chat,
        inputs=[user_id_input],
        outputs=[chatbot, chat_id_input, chats_output]
    )
    
    session_status_btn.click(
        check_user_session_status,
        inputs=[user_id_input],
        outputs=session_output
    )
    
    load_history_btn.click(
        load_chat_history,
        inputs=[history_chat_id, history_user_id],
        outputs=history_output
    )
    
    load_chats_btn.click(
        load_user_chats,
        inputs=[chats_user_id],
        outputs=chats_output
    )
    
    upload_btn.click(
        upload_document_handler,
        inputs=[file_upload],
        outputs=upload_output
    )
    
    list_files_btn.click(
        list_documents_handler,
        outputs=files_list_output
    )
    
    delete_btn.click(
        delete_document_handler,
        inputs=[filename_input],
        outputs=delete_output
    )
    


if __name__ == "__main__":
    print("üöÄ Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏–Ω–∏ –∏—à–≥–∞ —Ç—É—à–∏—Ä–∏—à...")
    print(f"üì° API —Å–µ—Ä–≤–µ—Ä: {API_BASE_URL}")
    print("üåê –í–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:7860")
    
    demo.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=True,
        show_error=True
    ) 