version: '3.8'

# =============================================================================
# Development Docker Compose Configuration
# =============================================================================
# This docker-compose file is optimized for development.
# It provides separate services for FastAPI and Gradio for easier debugging.

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: chatbot_postgres_dev
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-chatbot_db}
      POSTGRES_USER: ${POSTGRES_USER:-chatbot_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-chatbot_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-chatbot_user} -d ${POSTGRES_DB:-chatbot_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - chatbot-network
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant_dev
    ports:
      - "${QDRANT_PORT:-6333}:6333"
      - "${QDRANT_GRPC_PORT:-6334}:6334"
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=${QDRANT_LOG_LEVEL:-INFO}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/collections"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - chatbot-network
    volumes:
      - qdrant_storage:/qdrant/storage

  # Main FastAPI Application
  chatbot_app:
    image: ragchatbot:1.0.4
    container_name: chatbot_fastapi_dev
    ports:
      - "${PORT:-8081}:${PORT:-8081}"
      - "${GRADIO_PORT:-7860}:${GRADIO_PORT:-7860}"
    command: ["python", "application_runner.py", "--mode", "both"]
    env_file:
      - .env
    environment:
      # Application Configuration
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
      - RELOAD=${RELOAD:-true}
      - LOG_LEVEL=${LOG_LEVEL:-DEBUG}
      - HOST=${HOST:-0.0.0.0}
      - PORT=${PORT:-8081}
      - GRADIO_PORT=${GRADIO_PORT:-7860}
      - GRADIO_HOST=${GRADIO_HOST:-0.0.0.0}
      - GRADIO_SHARE=${GRADIO_SHARE:-false}
      - API_BASE_URL=http://localhost:${PORT:-8081}
      # PostgreSQL Database Configuration
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      # Qdrant Configuration
      - QDRANT_URL=http://qdrant:6333
    depends_on:
      postgres:
        condition: service_started
      qdrant:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7860"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 180s
    networks:
      - chatbot-network
    volumes:
      - ./documents:/app/documents
      - ./app:/app/app
      - ./database:/app/database
      - ./fastapi_application.py:/app/fastapi_application.py
      - ./application_runner.py:/app/application_runner.py
      - ./.env:/app/.env

# Development volumes for data persistence
volumes:
  postgres_data:
  qdrant_storage:

networks:
  chatbot-network:
    driver: bridge 