apiVersion: v1
kind: Namespace
metadata:
  name: chatbot
---
# PostgreSQL ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: chatbot
data:
  POSTGRES_DB: chatbot_db
  POSTGRES_USER: chatbot_user
  POSTGRES_PASSWORD: chatbot_password
---
# PostgreSQL PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: chatbot
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
# Qdrant PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: qdrant-pvc
  namespace: chatbot
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: chatbot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        envFrom:
        - configMapRef:
            name: postgres-config
        env:
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF8 --locale=C"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-script
          mountPath: /docker-entrypoint-initdb.d/init_db.sql
          subPath: init_db.sql
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - chatbot_user
            - -d
            - chatbot_db
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - chatbot_user
            - -d
            - chatbot_db
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: init-script
        configMap:
          name: postgres-init-script
---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: chatbot
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP
---
# PostgreSQL Init Script ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-script
  namespace: chatbot
data:
  init_db.sql: |
    -- Database initialization script for chatbot application
    -- This script creates the necessary tables for storing chat sessions and messages

    -- Enable UUID extension
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

    -- Create users table
    CREATE TABLE IF NOT EXISTS users (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        user_id VARCHAR(255) UNIQUE NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        last_activity TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        metadata JSONB DEFAULT '{}'::jsonb
    );

    -- Create chat sessions table
    CREATE TABLE IF NOT EXISTS chat_sessions (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        chat_id VARCHAR(255) UNIQUE NOT NULL,
        user_id VARCHAR(255) NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        last_activity TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        metadata JSONB DEFAULT '{}'::jsonb,
        FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
    );

    -- Create chat messages table
    CREATE TABLE IF NOT EXISTS chat_messages (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        chat_id VARCHAR(255) NOT NULL,
        role VARCHAR(50) NOT NULL CHECK (role IN ('user', 'assistant', 'system')),
        content TEXT NOT NULL,
        timestamp TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        metadata JSONB DEFAULT '{}'::jsonb,
        FOREIGN KEY (chat_id) REFERENCES chat_sessions(chat_id) ON DELETE CASCADE
    );

    -- Create indexes for better performance
    CREATE INDEX IF NOT EXISTS idx_users_user_id ON users(user_id);
    CREATE INDEX IF NOT EXISTS idx_chat_sessions_chat_id ON chat_sessions(chat_id);
    CREATE INDEX IF NOT EXISTS idx_chat_sessions_user_id ON chat_sessions(user_id);
    CREATE INDEX IF NOT EXISTS idx_chat_sessions_last_activity ON chat_sessions(last_activity);
    CREATE INDEX IF NOT EXISTS idx_chat_messages_chat_id ON chat_messages(chat_id);
    CREATE INDEX IF NOT EXISTS idx_chat_messages_timestamp ON chat_messages(timestamp);
    CREATE INDEX IF NOT EXISTS idx_chat_messages_role ON chat_messages(role);

    -- Create function to update last_activity automatically
    CREATE OR REPLACE FUNCTION update_last_activity()
    RETURNS TRIGGER AS $$
    BEGIN
        -- Update last_activity in chat_sessions when a new message is added
        UPDATE chat_sessions 
        SET last_activity = CURRENT_TIMESTAMP 
        WHERE chat_id = NEW.chat_id;
        
        -- Update last_activity in users table
        UPDATE users 
        SET last_activity = CURRENT_TIMESTAMP 
        WHERE user_id = (SELECT user_id FROM chat_sessions WHERE chat_id = NEW.chat_id);
        
        RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;

    -- Create trigger to automatically update last_activity
    CREATE TRIGGER trigger_update_last_activity
        AFTER INSERT ON chat_messages
        FOR EACH ROW
        EXECUTE FUNCTION update_last_activity();

    -- Create function to clean up expired sessions
    CREATE OR REPLACE FUNCTION cleanup_expired_sessions(hours_threshold INTEGER DEFAULT 24)
    RETURNS INTEGER AS $$
    DECLARE
        deleted_count INTEGER;
    BEGIN
        -- Delete expired chat sessions and their messages (CASCADE will handle messages)
        DELETE FROM chat_sessions 
        WHERE last_activity < CURRENT_TIMESTAMP - INTERVAL '1 hour' * hours_threshold;
        
        GET DIAGNOSTICS deleted_count = ROW_COUNT;
        
        -- Clean up users with no active sessions
        DELETE FROM users 
        WHERE user_id NOT IN (SELECT DISTINCT user_id FROM chat_sessions);
        
        RETURN deleted_count;
    END;
    $$ LANGUAGE plpgsql;

    -- Insert default user if not exists
    INSERT INTO users (user_id) 
    VALUES ('test_user_001') 
    ON CONFLICT (user_id) DO NOTHING;

    -- Grant necessary permissions
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO chatbot_user;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO chatbot_user;
    GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO chatbot_user;
---
# Qdrant Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qdrant
  namespace: chatbot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: qdrant
  template:
    metadata:
      labels:
        app: qdrant
    spec:
      containers:
      - name: qdrant
        image: qdrant/qdrant:latest
        ports:
        - containerPort: 6333
        - containerPort: 6334
        env:
        - name: QDRANT__SERVICE__HTTP_PORT
          value: "6333"
        - name: QDRANT__SERVICE__GRPC_PORT
          value: "6334"
        volumeMounts:
        - name: qdrant-storage
          mountPath: /qdrant/storage
        livenessProbe:
          httpGet:
            path: /collections
            port: 6333
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /collections
            port: 6333
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: qdrant-storage
        persistentVolumeClaim:
          claimName: qdrant-pvc
---
# Qdrant Service
apiVersion: v1
kind: Service
metadata:
  name: qdrant
  namespace: chatbot
spec:
  selector:
    app: qdrant
  ports:
  - name: http
    port: 6333
    targetPort: 6333
  - name: grpc
    port: 6334
    targetPort: 6334
  type: ClusterIP
---
# Chatbot Application ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: chatbot-config
  namespace: chatbot
data:
  DATABASE_URL: "postgresql://chatbot_user:chatbot_password@postgres:5432/chatbot_db"
  QDRANT_URL: "http://qdrant:6333"
  QDRANT_COLLECTION_NAME: "rag_documents"
  QDRANT_VECTOR_SIZE: "1024"
  QDRANT_DISTANCE: "COSINE"
  QDRANT_FORCE_RECREATE: "true"
  QDRANT_ON_DISK: "false"
  EMBEDDING_MODEL: "intfloat/multilingual-e5-large-instruct"
  CHAT_MODEL: "google/gemma-3-12b-it"
  VLLM_API_KEY: "EMPTY"
  VLLM_CHAT_ENDPOINT: "http://host.docker.internal:11444/v1"
  EMBEDDING_PORT: "11445"
  CHAT_MODEL_PORT: "11444"
  DOCUMENT_URL: "https://docs.vllm.ai/en/latest/getting_started/quickstart.html"
  DOCUMENTS_PATH: "/app/documents"
  TOP_K: "3"
  CHUNK_SIZE: "1000"
  CHUNK_OVERLAP: "200"
  HOST: "0.0.0.0"
  PORT: "8080"
---
# Chatbot Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chatbot-app
  namespace: chatbot
spec:
  replicas: 2
  selector:
    matchLabels:
      app: chatbot-app
  template:
    metadata:
      labels:
        app: chatbot-app
    spec:
      containers:
      - name: chatbot-app
        image: chatbot:latest
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: chatbot-config
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command: ['sh', '-c', 'until pg_isready -h postgres -p 5432 -U chatbot_user; do echo waiting for postgres; sleep 2; done;']
      - name: wait-for-qdrant
        image: curlimages/curl:latest
        command: ['sh', '-c', 'until curl -f http://qdrant:6333/collections; do echo waiting for qdrant; sleep 2; done;']
---
# Chatbot Application Service
apiVersion: v1
kind: Service
metadata:
  name: chatbot-app
  namespace: chatbot
spec:
  selector:
    app: chatbot-app
  ports:
  - port: 8080
    targetPort: 8080
  type: ClusterIP
---
# Gradio Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gradio-app
  namespace: chatbot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gradio-app
  template:
    metadata:
      labels:
        app: gradio-app
    spec:
      containers:
      - name: gradio-app
        image: chatbot:latest
        command: ["python", "gradio_app.py"]
        ports:
        - containerPort: 7860
        env:
        - name: API_BASE_URL
          value: "http://chatbot-app:8080"
        livenessProbe:
          httpGet:
            path: /
            port: 7860
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 7860
          initialDelaySeconds: 10
          periodSeconds: 10
      initContainers:
      - name: wait-for-chatbot-app
        image: curlimages/curl:latest
        command: ['sh', '-c', 'until curl -f http://chatbot-app:8080/health; do echo waiting for chatbot-app; sleep 2; done;']
---
# Gradio Application Service
apiVersion: v1
kind: Service
metadata:
  name: gradio-app
  namespace: chatbot
spec:
  selector:
    app: gradio-app
  ports:
  - port: 7860
    targetPort: 7860
  type: ClusterIP
---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: chatbot-ingress
  namespace: chatbot
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: chatbot.local
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: chatbot-app
            port:
              number: 8080
      - path: /
        pathType: Prefix
        backend:
          service:
            name: gradio-app
            port:
              number: 7860 